/* log */
function log() {};
//;if(Function.prototype.bind&&console&&typeof console.log=="object"){["log","info","warn","error","assert","dir","clear","profile","profileEnd"].forEach(function(method){console[method]=this.call(console[method],console);},Function.prototype.bind);}if(!window.log){window.log=function(){log.history=log.history||[];log.history.push(arguments);if(typeof console!='undefined'&&typeof console.log=='function'){if(window.opera){var i=0;while(i<arguments.length){console.log("Item "+(i+1)+": "+arguments[i]);i++;}}else if((Array.prototype.slice.call(arguments)).length==1&&typeof Array.prototype.slice.call(arguments)[0]=='string'){console.log((Array.prototype.slice.call(arguments)).toString());}else{console.log(Array.prototype.slice.call(arguments));}}else if(!Function.prototype.bind&&typeof console!='undefined'&&typeof console.log=='object'){Function.prototype.call.call(console.log,console,Array.prototype.slice.call(arguments));}else{if(!document.getElementById('firebug-lite')){var script=document.createElement('script');script.type="text/javascript";script.id='firebug-lite';script.src='https://getfirebug.com/firebug-lite.js';document.getElementsByTagName('HEAD')[0].appendChild(script);setTimeout(function(){log(Array.prototype.slice.call(arguments));},2000);}else{setTimeout(function(){log(Array.prototype.slice.call(arguments));},500);}}}}

/* jQuery.cleaner 1.0.2-custom */
;(function(a){a.fn.cleaner=function(b){var c=a.extend({},a.fn.cleaner.def,b);return this.each(function(){var f=this.type,d=this.tagName.toLowerCase();if(d=="form"||d=="fieldset"||d=="label"){return a(":input",this).cleaner()}if(f=="text"||f=="password"||d=="textarea"){if(a(this).attr("title")){var e=a(this).attr("title");a(this).blur(function(){a.fn.cleaner.clear(a(this),e,c)}).blur();a(this).focus(function(){if(a(this).val()==e){a(this).addClass(c.change)}if((c.clear)&&(a(this).val()==e)){a(this).val("")}a(this).addClass(c.focus)});a(this).hover(function(){a(this).addClass(c.hover)},function(){a(this).removeClass(c.hover)})}}})};a.fn.cleaner.clear=function(c,b,d){if(c.val()==""){c.removeClass(d.change).addClass(d.label);if(d.clear){c.val(b)}}else{c.addClass(d.change)}c.removeClass(d.focus)};a.fn.cleaner.def={clear:true,label:"label",focus:"focus",change:"change",hover:"hover"}})(jQuery);

host = 'http://'+window.location.host;

Setup = {
	service: {
		validation: host+'/services/postValidation',
	},
	
	message: {
		ajaxError: 'AJAX Error!'
	}
};





Set = {
	message: {
		ajaxError: 'AJAX ERROR!'
	}
};

jQuery(function() {
	Callback.init(document);
});





/* CALLBACK ***************************************************************************************/

Callback = {
	init: function() {
		NewsletterSignIn.init();
		TrainSearch.init();
		Surveys.init();
		
		Callback.work(document);
		jQuery(document).ajaxError(function() { log(Set.message.ajaxError); });
	},

	work: function(context) {
		log('Callback START', this);
		
		Cleaner.init(context);
		// ...
		
		AjaxForm.init(context);
		
		ValidatedForm.init();
		
		Surveys.work();
		AjaxLink.init(context);
		AjaxAutoload.init(context);
		
		log('Callback END', this);
	}
};

/* CLEANER ****************************************************************************************/

Cleaner = {
	init: function(context) {
		log('Cleaner', this);
		
		jQuery('.j-cleaner', context).cleaner();
		
		
		jQuery('.j-cleaner').parents('form').submit(function() {
			jQuery(this).find('.j-cleaner').each(function() {
				if (jQuery(this).val() == jQuery(this).attr('title')) {
					jQuery(this).val('');
				}
			});
		});
		
		
		
		log('OK');
	}
};

AjaxLink= {
	init: function(context) {
		jQuery( ".j-link" ).click(function() {
			var target = jQuery(jQuery(this).attr('data-target'));
			var url = jQuery(this).attr('data-url');
			
			target.load(url, function() {
				Callback.init(target);
			});
			
			return false;
		});
	}
}

AjaxAutoload = {
	init: function(context) {
		jQuery( ".j-autoload" ).each(function() {
			var url = jQuery(this).attr('data-url');
			
			jQuery(this).load(url, function() {
				jQuery(this).removeClass('j-autoload');
				Callback.init(jQuery(this));
			});
		});
	}
}


AjaxForm = {
	init: function(context) {
		jQuery( ".j-form" ).submit(function() {
			var target = jQuery(jQuery(this).attr('data-target'));
			var url = jQuery(this).attr('data-url');
			var params = jQuery(this).serialize();
			
			jQuery.post(url, jQuery(this).serialize(), function(data) {
				target.html(data);
			});
			
			return false;
		});
	}
}


/* SPAM PROTECT ****************************************************************************************/

// decrypt helper function
function decryptCharcode(n,start,end,offset)	{
	n = n + offset;
	if (offset > 0 && n > end)	{
		n = start + (n - end - 1);
	} else if (offset < 0 && n < start)	{
		n = end - (start - n - 1);
	}
	return String.fromCharCode(n);
}
// decrypt string
function decryptString(enc,offset)	{
	var dec = "";
	var len = enc.length;
	for(var i=0; i < len; i++)	{
		var n = enc.charCodeAt(i);
		if (n >= 0x2B && n <= 0x3A)	{
			dec += decryptCharcode(n,0x2B,0x3A,offset);	// 0-9 . , - + / :
		} else if (n >= 0x40 && n <= 0x5A)	{
			dec += decryptCharcode(n,0x40,0x5A,offset);	// A-Z @
		} else if (n >= 0x61 && n <= 0x7A)	{
			dec += decryptCharcode(n,0x61,0x7A,offset);	// a-z
		} else {
			dec += enc.charAt(i);
		}
	}
	return dec;
}


/* NEWSLETTER-SIGN-IN ****************************************************************************************/

NewsletterSignIn = {
	box: null,
	
	init: function() {
		log('NewsletterSignIn', this);
		
		NewsletterSignIn.box = jQuery('.j-newsletter-sign-in');
		
		// Submit form
		jQuery('form', NewsletterSignIn.box).submit(function(event) {
			NewsletterSignIn.formSend();
			event.preventDefault();
		});
		
		log('OK');
	},
	
	formSend: function() {
		form = jQuery('form', NewsletterSignIn.box);
		
		jQuery.post(form.attr('action'), form.serialize(), function(data) {
			if (data.state == 'ok') {
				jQuery('form', NewsletterSignIn.box).parent().html(data.form);
				NewsletterSignIn.init();
				Callback.work(NewsletterSignIn.box);
			} else {
				alert('Pri spracovanĂ­ formulĂˇra nastala chyba.');
			}
		}, 'json');
	}
};

/* TRAIN-SEARCH ****************************************************************************************/

TrainSearch = {
	box: null,
	
	init: function() {
		log('TrainSearch', this);
		
		TrainSearch.box = jQuery('#vlak_form');
		
		// Set time
		var today = new Date();
//		jQuery('#date_vlak', TrainSearch.box).val(Calendar.printDate(today, "%e.%o.%Y"));
//		jQuery('#vlak_time', TrainSearch.box).val(Calendar.printDate(today, "%k:%M"));
		
		log('OK');
	}
};



ValidatedForm = {
	form: null,
	box: null,
	
	init: function(context) {
		log('ValidatedForm');
		
		if (jQuery('.j-validate', context).size()) {
			ValidatedForm.form = jQuery('.j-validate', context).addClass('disabled');
			ValidatedForm.box = jQuery(ValidatedForm.form.attr('data-target'));
				
			ValidatedForm.form.submit(function(ev) {
				ev.preventDefault();
				if (! ValidatedForm.form.hasClass('j-sending')) {
					ValidatedForm.form.addClass('j-sending');
					
					if (ValidatedForm.form.hasClass('disabled')) {
						jQuery.get(Setup.service.validation, function(data) {
							jQuery('#message-timestamp').val(data);
							ValidatedForm.form.removeClass('j-sending');
							ValidatedForm.form.removeClass('disabled').submit();
						});
					} else {
						jQuery.post(ValidatedForm.form.attr('action'), ValidatedForm.form.serialize(), function(data) {
							ValidatedForm.box.html(data);
							Callback.work(ValidatedForm.box);
						});
					}
				}
			});
		}
		
		log('MessageForm');
	}
};

/* SURVEYS ****************************************************************************************/
Surveys = {
	init: function() {
		log('Surveys init');
		
		jQuery('.j-survey').map(function(){
			surveyId = jQuery(this).attr('data-survey-id');
			if (jQuery.cookie('s-' + surveyId) != undefined) {
				jQuery(this).find('.not-voted').hide();
				jQuery(this).find('.already-voted').show();
			}
			
			jQuery(this).find('.j-survey-vote').click(function() {
				jQuery(this).parents('.j-survey').find('.loading').show();
				
				jQuery.getJSON(jQuery(this).attr('data-url'), function(data) {
					jQuery('#survey-box-' + data.survey + ' .loading').hide();
					
					Surveys.work();
				});
				
				return false;
			});
		});
	},
	
	work: function() {
		log('Surveys work');
		
		jQuery('.j-survey').map(function(){
			surveyId = jQuery(this).attr('data-survey-id');
			if (jQuery.cookie('s-' + surveyId) != undefined) {
				jQuery(this).find('.not-voted').hide();
				jQuery(this).find('.already-voted').show();
			}
		});
	}
};


/*!
* webTicker 1.3
* Examples and documentation at:
* http://jonmifsud.com
* 2011 Jonathan Mifsud
* Version: 1.2 (26-JUNE-2011)
* Dual licensed under the MIT and GPL licenses:
* http://www.opensource.org/licenses/mit-license.php
* http://www.gnu.org/licenses/gpl.html
* Requires:
* jQuery v1.4.2 or later
*
*/
(function( jQuery ){

  var globalSettings = new Array();

  var methods = {
    init : function( settings ) { // THIS
settings = jQuery.extend({
travelocity: 0.05,
direction: 1,
moving: true
}, settings);
globalSettings[jQuery(this).attr('id')] = settings;
return this.each(function(){
var jQuerystrip = jQuery(this);
jQuerystrip.addClass("newsticker")
var stripWidth = 0;
var jQuerymask = jQuerystrip.wrap("<div class='mask'></div>");
jQuerymask.after("<span class='tickeroverlay-left'>&nbsp;</span><span class='tickeroverlay-right'>&nbsp;</span>")
var jQuerytickercontainer = jQuerystrip.parent().wrap("<div class='tickercontainer'></div>");
var count = jQuerystrip.find("li").length;
jQuerystrip.find("li").each(function(i){
stripWidth += jQuery(this, i).outerWidth(true);
});
var ww = stripWidth;
var content = jQuerystrip.html();
while((stripWidth-500)<jQuerystrip.parent('div').outerWidth(true))
{
	jQuerystrip.append(content);
	stripWidth += ww;
}
jQuerystrip.width(stripWidth+500);//20 used for ie9 fix
var first = jQuerystrip.children().first();
var travel = first.outerWidth(true);
var timing = travel/settings.travelocity;
jQuerystrip.css("left","940px");
scrollnews(travel, timing);


function scrollnews(spazio, tempo){
if (settings.direction == 1)
jQuerystrip.animate({left: '-='+ spazio}, tempo, "linear", function(){

var position = jQuerystrip.position();
if(position.left < 0)
{
	jQuerystrip.append(jQuerystrip.children().first());
	jQuerystrip.css("left", '0');
}
var first = jQuerystrip.children().first();
var width = first.outerWidth(true);
var defTiming = width/settings.travelocity;
//jQuerystrip.css("left", left);

scrollnews(width, defTiming);
});
else
jQuerystrip.animate({right: '-='+ spazio}, tempo, "linear", function(){
jQuerystrip.children().last().after(jQuerystrip.children().first());
var first = jQuerystrip.children().first();
var width = first.outerWidth(true);
var defTiming = width/settings.travelocity;
//jQuerystrip.css("left", left);
jQuerystrip.css("right", '0');
scrollnews(width, defTiming);
});
}


jQuerystrip.hover(function(){

jQuery(this).stop();
},
function(){
if (globalSettings[jQuery(this).attr('id')].moving){
var offset = jQuery(this).offset();
var first = jQuerystrip.children().first();
var width = first.outerWidth(true);
var residualSpace;
if (settings.direction == 1) residualSpace = parseInt(jQuery(this).css('left').replace('px',''))+ width;
else residualSpace = parseInt(jQuery(this).css('right').replace('px',''))+ width;
var residualTime = residualSpace/settings.travelocity;
scrollnews(residualSpace, residualTime);
}
});
});
},
    stop : function( ) {
			
if (globalSettings[jQuery(this).attr('id')].moving){
globalSettings[jQuery(this).attr('id')].moving = false;
return this.each(function(){
jQuery(this).stop();
});
}
},
    cont : function( ) { // GOOD
if (!(globalSettings[jQuery(this).attr('id')].moving)){
globalSettings[jQuery(this).attr('id')].moving = true;
var settings = globalSettings[jQuery(this).attr('id')];
return this.each(function(){
var jQuerystrip = jQuery(this);
function scrollnews(spazio, tempo){
if (settings.direction == 1)
jQuerystrip.animate({left: '-='+ spazio}, tempo, "linear", function(){

jQuerystrip.children().last().after(jQuerystrip.children().first());
var first = jQuerystrip.children().first();
var width = first.outerWidth(true);
var defTiming = width/settings.travelocity;
//jQuerystrip.css("left", left);
jQuerystrip.css("left", '0');
scrollnews(width, defTiming);
});
else
jQuerystrip.animate({right: '-='+ spazio}, tempo, "linear", function(){
jQuerystrip.children().last().after(jQuerystrip.children().first());
var first = jQuerystrip.children().first();
var width = first.outerWidth(true);
var defTiming = width/settings.travelocity;
//jQuerystrip.css("left", left);
jQuerystrip.css("right", '0');
scrollnews(width, defTiming);
});

}

var offset = jQuery(this).offset();
var first = jQuerystrip.children().first();
var width = first.outerWidth(true);
var residualSpace;
if (settings.direction == 1) residualSpace = parseInt(jQuery(this).css('left').replace('px',''))+ width;
else residualSpace = parseInt(jQuery(this).css('right').replace('px',''))+ width;
var residualTime = residualSpace/settings.travelocity;
scrollnews(residualSpace, residualTime);

});
}
}
  };

  jQuery.fn.webTicker = function( method ) {
			
    
    // Method calling logic
    if ( methods[method] ) {
      return methods[ method ].apply( this, Array.prototype.slice.call( arguments, 1 ));
    } else if ( typeof method === 'object' || ! method ) {
      return methods.init.apply( this, arguments );
    } else {
      jQuery.error( 'Method ' + method + ' does not exist on jQuery.webTicker' );
    }
  
  };

})( jQuery );